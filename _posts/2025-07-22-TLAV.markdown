---
layout: post
title:  Thinking Like a Vertex
date:   2025-07-22 15:30:00 +0300
tags:   ParallelProgramming
description:  分布式大型图处理
---

# [简介](#简介)

参考文献：

Mccune Robert Ryan，Weninger Tim, Madey Greg. Thinking Like a Vertex: a Survey of Vertex-Centric Frameworks for Large-Scale Distributed Graph Processing. 2015.     


摘要：

1. 大型图处理;    
2. 迭代式图算法;    
3. 并行算法框架;     
4. 顶点中心化的并行方式;   


## [MapReduce](#MapReduce)

参考文献：

Jeffrey Dean, Sanjay Ghemawat. MapReduce: Simplified Data Processing on Large Clusters. 

2014年3月，IBM报告当今世界90%的数据是在近两年生产的，大数据处理的问题已经摆在了众人面前。分析系统开始从“共享的”、“中心化的”处理框架发展向“分布式的”、“去中心化的”的处理框架。    

MapReduce框架展示了一种程序范式去充分发挥分布式算法的能力，而隐藏掉底层级的细节。MapReduce把任务分为**Map**阶段和**Reduce**阶段。**Map**函数处理一个键值对，生成一组中间级的键值对，**Reduce**函数合并所有具有相同键的中间级的值。

具体处理过程如下：   

![]({{ site.baseurl }}/images/TLAV-001.jpg)  

## [Bulk Synchronous Parallel](#Bulk-Synchronous-Parallel)

参考文献：

Valiant Leslie G. A Bridging Model for Parallel Computation.   

冯诺依曼模型的成功的事实是其在软件和硬件之间建立了一座高效的桥梁，高级的语言可以高效的在其上进行编译，可以高效的在硬件上运行。在并行计算任务上也对此样的桥梁热切需求，批量同步并行(BSP)就扮演了这个桥梁的角色。

![]({{ site.baseurl }}/images/TLAV-002.jpg)  

BSP模型充分利用了消息通讯协议(MPI)，其能避免高延迟读取，死锁，竞争条件。BSP是两步式执行过程，能进行迭代和同步。    
1. 对本地数据执行计算任务;    
2. 通讯计算结果，并重复这两步;   

这个两步组成的一个迭代被称作**超级步**。

## [Graph Parallel Systems](#Graph-Parallel-Systems)

1. Pregel系统用BSP为图算法定制了API, 使其可以让工程师表达"think like a vertex". 在每个超级步，一个顶点执行用户定义的顶点函数，并把结果发送到相邻节点，超级步在一个同步栅栏处终止，且保证在当前超级步发送信息，在下一个超级步接收信息。顶点拥有两个状态“活跃的”和“不活跃的”。Pergel将在所有顶点终止时和没有信息交换时终止。 
2. BSP是一个一般化的广泛应用的模型，在分布式处理器上设有全局同步栅栏。TLAV框架采用顶点中心化编程模型，和像Pregel和其它BSP的衍生的同步执行方式。另外有其它异步执行框架可以在某些具体算法上表现优异。
3. MapReduce不同于TLAV和BSP,不能很好的支持迭代式算法。

![]({{ site.baseurl }}/images/TLAV-003.jpg)  

## [Example Single Source Shortest Path in TLAV paradigm](#Example)

![]({{ site.baseurl }}/images/TLAV-004.jpg)  

![]({{ site.baseurl }}/images/TLAV-005.jpg)  

## [Four Pillars of TLAV Frameworks](#Four-Pillars-of-TLAV-Frameworks)

1. Timing-用户定义的顶点程序以何种调度进行执行；
2. Communication-顶点程序数据如何被其它顶点程序获取到；
3. Execution Model-顶点程序执行和数据流的实现方式；
4. Partitioning-图的顶点如何被分别存储在由多个工作机组成的系统上；

# [Timing](#Timing)

"Timing"描述了活跃的顶点如何被调度到计算任务上。其可以是同步的，可以是异步的，可以是两种的混合。（我的理解就是如何在合适的时间做合适的任务）

![]({{ site.baseurl }}/images/TLAV-006.jpg)  

## [Synchronous](#Synchronous)

同步模型以BSP为基础。

## [Asynchronous](#Asynchronous)

## [Hybrid](#Hybrid)

